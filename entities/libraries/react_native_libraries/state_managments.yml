#################################################
# Data Layer
#################################################

- id: state_management_jotai
  name: Jotai
  npm: jotai
  github: pmndrs/jotai
  # description: Atom-based, primitive, flexible state management for React
  homepageUrl: https://jotai.org
  example:
    language: js
    code: |
      const valueAtom = atom(0)

      function Counter() {
        const [value, setValue] = useAtom(animeAtom)
        const increment = setValue((v) => v + 1)
        // ...
      }

- id: state_management_legend_state
  name: Legend State
  npm: "@legendapp/state"
  github: LegendApp/legend-state
  homepageUrl: https://legendapp.com/open-source/state/
  # description: "Flexible, high-performance state management for React and React Native"
  example:
    language: js
    code: |
      const counter = observable({ value: 0 })

      const Counter = observer(() => {
        const value = counter.value.use()
        const increment = () => counter.value.set((v) => v + 1)
        // ...
      })

- id: state_management_mobx
  name: MobX
  npm: mobx
  github: mobxjs/mobx
  # description: "Simple, scalable state management."
  homepageUrl: https://mobx.js.org
  example:
    language: js
    code: |
      const counter = observable({ value: 0 });

      const Counter = observer(() => {
        const value = counter.value
        const increment = () => counter.value++
        // ...
      })

- id: state_management_mobx_state_tree
  name: MobX State Tree
  npm: mobx-state-tree
  homepage: https://mobx-state-tree.js.org
  github: https://github.com/mobxjs/mobx-state-tree
  example:
    language: js
    code: |
      const model = t
        .model('counter', { value: t.number })
        .actions((self) => ({ increment() { self.value++ }))

      const counter = model.create({ value: 0 })

      function Counter() {
        const value = counter.value
        const increment = counter.increment
        // ...
      }

- id: state_management_rn_built_in
  name: React built-ins
  homepage: https://react.dev/reference/react/hooks
  github: https://github.com/facebook/react
  example:
    language: js
    code: |
      function Counter() {
        const [value, setValue] = useState(0);
        const increment = () => setValue((v) => v + 1);
        // ...
      }

- id: state_management_recoil
  name: Recoil
  npm: recoil
  github: facebookexperimental/Recoil
  homepageUrl: https://recoiljs.org
  example:
    language: js
    code: |
      const state = atom({ key: 'counter', default: 0 });

      function Counter() {
        const [value, setValue] = useRecoilState(state)
        const increment = () => setValue(v => v + 1)
        // ...
      }

- id: state_management_redux
  name: Redux
  npm: redux
  github: reduxjs/redux
  # description: Predictable state container for JavaScript apps
  homepageUrl: https://redux.js.org
  example:
    language: js
    code: |
      function reducer(state = { value: 0 }, action) {
        switch (action.type) {
          case 'increment':
            return { value: state.value + 1 }
          default:
            return state
        }
      }
      const store = createStore(reducer)

      function Counter() {
        const value = useSelector((state) => state.value);
        const dispatch = useDispatch()
        const increment = dispatch({ type: 'increment' })
        // ...
      }

- id: state_management_redux_toolkit
  name: Redux Toolkit
  npm: "@reduxjs/toolkit"
  homepage: https://redux-toolkit.js.org
  github: https://github.com/reduxjs/redux-toolkit
  example:
    language: js
    code: |
      const slice = createSlice({
        name: 'counter',
        initialState: { value: 0 },
        reducers: {
          increment: (state) => { state.value++ },
        },
      })

      const store = configureStore({ reducer: slice.reducer })

      function Counter() {
        const value = useSelector((state) => state.value)
        const dispatch = useDispatch()
        const increment = () => dispatch(counterSlice.actions.increment())
        // ...
      }

- id: state_management_xstate
  name: XState
  npm: xstate
  github: davidkpiano/xstate
  # description: State machines and statecharts for the modern web.
  homepageUrl: https://xstate.js.org/docs
  example:
    language: js
    code: |
      const machine = createMachine({
        id: 'counter',
        initial: 'active',
        states: {
          active: {
            on: {
              INCREMENT: {
                actions: (context) => context.value++
              }
            }
          }
        }
      });

      function Counter() {
        const [state, send] = useMachine(machine.withContext({ value: 0 }))
        const value = state.context.value
        const increment = () => send('INCREMENT')
        // ...
      }

- id: state_management_zustand
  name: Zustand
  npm: zustand
  github: pmndrs/zustand
  # description: Bear necessities for state management in React
  homepageUrl: "https://zustand-demo.pmnd.rs/"
  example:
    language: js
    code: |
      const useStore = create((set) => ({
        count: 0,
        increment: () => set((state) => ({ count: state.count + 1 })),
      }))

      function Counter() {
        const { count, increment } = useStore()
        // ...
      }

# - id: state_management_apollo
#   name: Apollo Client
#   npm: "@apollo/client"
#   github: apollographql/apollo-client
#   description: >-
#     Apollo Client is a comprehensive state management library for JavaScript. It enables you to manage both local and remote data with GraphQL. Use it to fetch, cache, and modify application data, all while automatically updating your UI.
#   homepageUrl: https://www.apollographql.com/docs/react

# removed because it matches too many libraries in the GraphQL ecosystem
# - id: state_management_graphql
#   name: GraphQL
#   npm: graphql-relay
#   github: graphql/graphql-spec
#   description: >-
#     GraphQL is a query language and execution engine tied to any backend
#     service.
#   homepageUrl: "https://spec.graphql.org"

- id: state_management_pinia
  name: Pinia
  homepageUrl: https://pinia.vuejs.org/
  github: vuejs/pinia
  tags:
    - vue

- id: state_management_relay
  name: Relay
  npm: react-relay
  github: facebook/relay
  description: Relay is a JavaScript framework for building data-driven React applications.
  homepageUrl: "https://relay.dev"

- id: state_management_vuex
  name: Vuex
  npm: vuex
  github: vuejs/vuex
  description: Centralized State Management for Vue.js.
  homepageUrl: "https://vuex.vuejs.org"

- id: state_management_swr
  name: SWR
  npm: swr
  github: vercel/swr
  description: React Hooks library for remote data fetching
  homepageUrl: "https://swr.vercel.app"
  tags:
    - data_fetching

- id: state_management_ngrx
  name: NgRx
  npm: null
  github: ngrx/platform
  description: Reactive libraries for Angular
  homepageUrl: "https://ngrx.io"

- id: state_management_effector
  name: Effector
  npm: effector
  github: effector/effector
  description: Reactive state manager
  homepageUrl: "https://effector.dev"

- id: state_management_akita
  name: Akita
  npm: "@datorama/akita"
  github: datorama/akita
  description: State Management Tailored-Made for JS Applications
  homepageUrl: "https://datorama.github.io/akita/"

- id: state_management_ember_data
  name: ember-data
  npm: ember-data
  github: emberjs/data
  description: A data persistence library for Ember.js.
  homepageUrl: https://github.com/emberjs/data

- id: state_management_ngxs
  name: NGXS
  npm: "@ngxs/store"
  github: ngxs/store
  description: NGXS - State Management for Angular
  homepageUrl: "http://ngxs.io"

- id: state_management_redux_saga
  name: Redux-Saga
  npm: redux-saga
  github: redux-saga/redux-saga
  description: An alternative side effect model for Redux apps
  homepageUrl: "https://redux-saga.js.org/"

- id: state_management_urql
  name: URQL
  npm: urql
  github: FormidableLabs/urql
  description: The highly customizable and versatile GraphQL client.
  homepageUrl: "https://formidable.com/open-source/urql/docs/"

- id: state_management_storeon
  name: Storeon
  npm: storeon
  github: storeon/storeon
  description: "\U0001F329 A tiny (185 bytes) event-based Redux-like state manager for React, Preact, Angular, Vue, and Svelte"
  homepageUrl: "https://evilmartians.com/chronicles/storeon-redux-in-173-bytes"

- id: state_management_overmind
  name: Overmind
  npm: overmind
  github: cerebral/overmind
  description: Frictionless state management
  homepageUrl: "https://overmindjs.org"

- id: state_management_react_query
  name: TanStack Query
  description: (React Query)
  npm: "@tanstack/react-query"
  homepage: https://tanstack.com/query/latest/docs/react/overview
  github: https://github.com/TanStack/query

#################################################
# Data Fetching
#################################################

- id: trpc
  name: tRPC
  homepageUrl: https://trpc.io/
  tags:
    - data_fetching

- id: tanstack_query
  name: TanStack Query
  homepageUrl: https://tanstack.com/query/v4
  patterns:
    - react query
  tags:
    - data_fetching

- id: tanstack_forms
  name: TanStack Forms
  github: TanStack/form
  homepageUrl: https://tanstack.com/form
  patterns:
    - "@tanstack/form"
    - TanStack Form
    - tanstack/form
  tags:
    - forms

- id: rtk_query
  name: RTK Query
  homepageUrl: https://redux-toolkit.js.org/rtk-query/overview
  tags:
    - data_fetching

- id: dexie
  name: Dexie
  homepageUrl: https://dexie.org/

- id: valtio
  name: Valtio
  homepageUrl: https://valtio.pmnd.rs/
  github: pmndrs/valtio
  npm: valtio

- id: nano_stores
  name: Nano Stores
  homepageUrl: https://github.com/nanostores/nanostores

- id: legend_state
  name: Legend State
  homepage: https://legendapp.com/open-source/state/
  npm: "@legendapp/state"
  github: https://github.com/LegendApp/legend-state

- id: react_easy_state
  name: React Easy State
  npm: "@risingstack/react-easy-state"
  github: https://github.com/RisingStack/react-easy-state

- id: easy_peasy
  npm: easy-peasy
  name: Easy Peasy
  github: https://github.com/ctrlplusb/easy-peasy
  description: Vegetarian friendly state for React
  homepage: https://easy-peasy.dev/

- id: react_ridge_state
  npm: react-ridge-state
  github: https://github.com/web-ridge/react-ridge-state
  name: react-ridge-state
  description: Simple 💪 fast ⚡️ and small 🎈 (400 bytes) global state management for React (Native)

- id: state_decorator
  name: StateDecorator
  npm: state-decorator
  github: https://github.com/GlobalSport/state-decorator
  description: React state management library

- id: react_native_mmkv
  name: react-native-mmkv
  npm: react-native-mmkv
  github: https://github.com/mrousavy/react-native-mmkv
  description: ⚡️ The fastest key/value storage for React Native. ~30x faster than AsyncStorage!

- id: fluxible
  name: Fluxible
  npm: fluxible
  github: https://github.com/yahoo/fluxible
  description: A pluggable container for universal flux applications.
  homepage: https://fluxible.io/

- id: react_native_async_storage
  npm: "@react-native-async-storage/async-storage"
  name: React Native Async Storage
  github: https://github.com/react-native-async-storage/async-storage
  homepage: https://react-native-async-storage.github.io/async-storage/
  description: An asynchronous, persistent, key-value storage system for React Native.
