- id: data_fetching
  name: Data fetching

- id: data_fetching_fetch
  name: Fetch API
  homepageUrl: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
  example:
    language: js
    code: |
      const response = await fetch(url)

- id: data_fetching_axios
  name: Axios
  homepageUrl: https://axios-http.com/docs/intro
  npm: axios
  github: https://github.com/axios/axios
  # description: Promise based HTTP client for the browser and node.js
  example:
    language: js
    code: |
      const response = await axios.get(url)

- id: data_fetching_apollo
  name: Apollo Client
  npm: "@apollo/client"
  github: apollographql/apollo-client
  homepageUrl: https://www.apollographql.com/docs/react
  # description: Apollo Client is a comprehensive state management library for JavaScript. It enables you to manage both local and remote data with GraphQL. Use it to fetch, cache, and modify application data, all while automatically updating your UI.
  example:
    language: js
    code: |
      const client = new ApolloClient({ uri, cache })
      const query = gql`
        query Example {
          // ...
        }
      `

      function Component() {
        const { loading, error, data } = useQuery(query)
        // ...
      }

- id: data_fetching_trpc
  name: tRPC
  homepageUrl: https://trpc.io/
  npm: "@trpc/client"
  github: https://github.com/trpc/trpc
  # description: üßô‚Äç‚ôÄÔ∏è Move Fast and Break Nothing. End-to-end typesafe APIs made easy.
  example:
    language: js
    code: |
      const trpc = createTRPCClient<AppRouter>()

      function Component() {
        const result = trpc.hello.useQuery()
        // ...
      }

- id: data_fetching_tan_stack
  name: TanStack Query
  homepageUrl: https://tanstack.com/query/latest
  npm: "@tanstack/react-query"
  github: https://github.com/TanStack/query
  # description: ü§ñ Powerful asynchronous state management, server-state utilities and data fetching for the web. TS/JS, React Query, Solid Query, Svelte Query and Vue Query.
  example:
    language: js
    code: |
      const queryClient = new QueryClient()

      function Component() {
        const { isPending, error, data } = useQuery({ queryKey: ['example'], queryFn })
        // ...
      }

- id: data_fetching_swr
  name: SWR
  homepageUrl: https://swr.vercel.app/
  npm: swr
  github: https://github.com/vercel/swr
  # description: React Hooks for Data Fetching
  example:
    language: js
    code: |
      function Component() {
        const { data, error, isLoading } = useSWR(url, fetcher)
        // ...
      }

- id: data_fetching_relay
  name: Relay
  homepageUrl: https://relay.dev/
  github: https://github.com/facebook/relay
  npm: react-relay
  # description: Relay is a JavaScript framework for building data-driven React applications.
  example:
    language: js
    code: |
      const query = graphql`
        query Example {
          // ...
        }
      `

      function Component() {
        const data = useLazyLoadQuery(query)
        // ...
      }


- id: data_fetching_rtk_query
  name: RTK Query
  homepageUrl: https://redux-toolkit.js.org/rtk-query/overview
  npm: "@reduxjs/toolkit"
  github: https://github.com/reduxjs/redux-toolkit
  example:
    language: js
    code: |
      const exampleApi = createApi({
        baseQuery: fetchBaseQuery({ baseUrl }),
        endpoints: (builder) => ({
          exampleQuery: builder.query({
            query: () => `examplePath`
          })
        }),
        // ...
      })

      const store = configureStore({
        reducer: {
          [exampleApi.reducerPath]: exampleApi.reducer
        },
        // ...
      })

      function Component() {
        const { data, error, isLoading } = exampleApi.useExampleQuery()
        // ...
      }

- id: data_fetching_other
  name: Other data fetching

- id: data_fetching_happiness
  name: Overall happiness

# freeform

- id: rtkquery
  name: RTK Query
  homepageUrl: https://redux-toolkit.js.org/rtk-query/overview
  npm: "@reduxjs/toolkit"
  github: https://github.com/reduxjs/redux-toolkit

- id: urql
  npm: urql
  name: URQL
  homepageUrl: https://formidable.com/open-source/urql/
  github: https://github.com/urql-graphql/urql
  description: The highly customizable and versatile GraphQL client with which you add on features like normalized caching as you grow.

- id: apisauce
  name: Apisauce
  npm: apisauce
  github: https://github.com/infinitered/apisauce
  description: Axios + standardized errors + request/response transforms.

- id: wretch
  name: Wretch
  npm: wretch
  github: https://github.com/elbywan/wretch
  description: A tiny wrapper built around fetch with an intuitive syntax. üç¨
  homepageUrl: https://elbywan.github.io/wretch/
