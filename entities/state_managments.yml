- id: state_management_jotai
  name: Jotai
  npm: jotai
  github: pmndrs/jotai
  # description: Atom-based, primitive, flexible state management for React
  homepageUrl: https://jotai.org
  example:
    language: js
    code: |
      const valueAtom = atom(0)

      function Counter() {
        const [value, setValue] = useAtom(animeAtom)
        const increment = setValue((v) => v + 1)
        // ...
      }

- id: state_management_legend_state
  name: Legend State
  npm: "@legendapp/state"
  github: LegendApp/legend-state
  homepageUrl: https://legendapp.com/open-source/state/
  # description: "Flexible, high-performance state management for React and React Native"
  example:
    language: js
    code: |
      const counter = observable({ value: 0 })

      const Counter = observer(() => {
        const value = counter.value.use()
        const increment = () => counter.value.set((v) => v + 1)
        // ...
      })

- id: state_management_mobx
  name: MobX
  npm: mobx
  github: mobxjs/mobx
  # description: "Simple, scalable state management."
  homepageUrl: https://mobx.js.org
  example:
    language: js
    code: |
      const counter = observable({ value: 0 });

      const Counter = observer(() => {
        const value = counter.value
        const increment = () => counter.value++
        // ...
      })

- id: state_management_mobx_state_tree
  name: MobX State Tree
  npm: mobx-state-tree
  homepage: https://mobx-state-tree.js.org
  github: https://github.com/mobxjs/mobx-state-tree
  example:
    language: js
    code: |
      const model = t
        .model('counter', { value: t.number })
        .actions((self) => ({ increment() { self.value++ }))

      const counter = model.create({ value: 0 })

      function Counter() {
        const value = counter.value
        const increment = counter.increment
        // ...
      }

- id: state_management_rn_built_in
  name: React built-ins
  homepage: https://react.dev/reference/react/hooks
  github: https://github.com/facebook/react
  example:
    language: js
    code: |
      function Counter() {
        const [value, setValue] = useState(0);
        const increment = () => setValue((v) => v + 1);
        // ...
      }

- id: state_management_recoil
  name: Recoil
  npm: recoil
  github: facebookexperimental/Recoil
  homepageUrl: https://recoiljs.org
  example:
    language: js
    code: |
      const state = atom({ key: 'counter', default: 0 });

      function Counter() {
        const [value, setValue] = useRecoilState(state)
        const increment = () => setValue(v => v + 1)
        // ...
      }

- id: state_management_redux
  name: Redux
  npm: redux
  github: reduxjs/redux
  # description: Predictable state container for JavaScript apps
  homepageUrl: https://redux.js.org
  example:
    language: js
    code: |
      function reducer(state = { value: 0 }, action) {
        switch (action.type) {
          case 'increment':
            return { value: state.value + 1 }
          default:
            return state
        }
      }
      const store = createStore(reducer)

      function Counter() {
        const value = useSelector((state) => state.value);
        const dispatch = useDispatch()
        const increment = dispatch({ type: 'increment' })
        // ...
      }

- id: state_management_redux_toolkit
  name: Redux Toolkit
  npm: "@reduxjs/toolkit"
  homepage: https://redux-toolkit.js.org
  github: https://github.com/reduxjs/redux-toolkit
  example:
    language: js
    code: |
      const slice = createSlice({
        name: 'counter',
        initialState: { value: 0 },
        reducers: {
          increment: (state) => { state.value++ },
        },
      })

      const store = configureStore({ reducer: slice.reducer })

      function Counter() {
        const value = useSelector((state) => state.value)
        const dispatch = useDispatch()
        const increment = () => dispatch(counterSlice.actions.increment())
        // ...
      }

- id: state_management_xstate
  name: XState
  npm: xstate
  github: davidkpiano/xstate
  # description: State machines and statecharts for the modern web.
  homepageUrl: https://stately.ai/docs/xstate
  example:
    language: js
    code: |
      const machine = createMachine({
        initial: 'active',
        context: {
          value: 0,
        },
        states: {
          active: {
            on: {
              INCREMENT: {
                actions: assign({
                  value: (context) => context.value + 1 })
                }
              }
            }
          }
        }
      });

      function Counter() {
        const [snapshot, send] = useMachine(machine)
        const value = snapshot.context.value
        const increment = () => send('INCREMENT')
        // ...
      }

- id: state_management_zustand
  name: Zustand
  npm: zustand
  github: pmndrs/zustand
  # description: Bear necessities for state management in React
  homepageUrl: "https://zustand-demo.pmnd.rs/"
  example:
    language: js
    code: |
      const useStore = create((set) => ({
        count: 0,
        increment: () => set((state) => ({ count: state.count + 1 })),
      }))

      function Counter() {
        const { count, increment } = useStore()
        // ...
      }

#######################################################################
###                              STORAGE LIBS                       ###
#######################################################################

- id: state_management_storage_react_native_async_storage
  name: React Native Async Storage
  homepageUrl: https://react-native-async-storage.github.io/async-storage/
  npm: "@react-native-async-storage/async-storage"
  github: https://github.com/react-native-async-storage/async-storage
  description: An asynchronous, persistent, key-value storage system for React Native.

- id: state_management_storage_realm
  name: Realm
  npm: realm
  homepageUrl: https://realm.io/
  github: https://github.com/realm/realm-js
  description: "Realm is a mobile database: an alternative to SQLite & key-value stores"

- id: state_management_storage_watermelondb
  name: WatermelonDB
  npm: "@nozbe/watermelondb"
  homepageUrl: https://watermelondb.dev
  github: https://github.com/Nozbe/WatermelonDB
  description: üçâ Reactive & asynchronous database for powerful React and React Native apps ‚ö°Ô∏è

- id: state_management_storage_react_native_mmkv
  name: react-native-mmkv
  github: https://github.com/mrousavy/react-native-mmkv
  description: ‚ö°Ô∏è The fastest key/value storage for React Native. ~30x faster than AsyncStorage!
  npm: react-native-mmkv

- id: state_management_storage_react_native_mmkv_storage
  name: react-native-mmkv-storage
  npm: react-native-mmkv-storage
  github: https://github.com/ammarahm-ed/react-native-mmkv-storage
  description: An ultra fast (0.0002s read/write), small & encrypted mobile key-value storage framework for React Native written in C++ using JSI
  homepageUrl: https://rnmmkv.vercel.app/

- id: state_management_storage_react_native_sqlite_storage
  name: React Native SQLite Storage
  npm: react-native-sqlite-storage
  github: https://github.com/andpor/react-native-sqlite-storage
  description: Full featured SQLite3 Native Plugin for React Native (Android and iOS)

- id: state_management_storage_expo_sqlite
  name: Expo SQLite
  npm: expo-sqlite
  homepageUrl: https://docs.expo.dev/versions/latest/sdk/sqlite/

- id: state_management_storage_rxdb
  name: RxDB
  npm: rxdb
  homepageUrl: https://rxdb.info/
  github: https://github.com/pubkey/rxdb
  description: A fast, offline-first, reactive database for JavaScript Applications
